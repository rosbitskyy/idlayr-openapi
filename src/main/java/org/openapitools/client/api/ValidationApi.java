/*
 * Copyright (c) 2025.
 * @Author: Rosbitskyy Ruslan
 * @email: rosbitskyy@gmail.com
 * @license Licensed under the MIT License (MIT)
 */

/*
 * IDLayr Passkeys
 * Base API definition for IDLayr Passkey Server 
 *
 * The version of the OpenAPI document: 1.0.12
 * Contact: help@idlayr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WebAuthnGetAssertionRequest;
import org.openapitools.client.model.WebAuthnGetAssertionResponse;
import org.openapitools.client.model.WebAuthnMakeCredentialRequest;
import org.openapitools.client.model.WebAuthnMakeCredentialResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ValidationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for passkeyAutofillCompletePost
     * @param webAuthnGetAssertionResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passkeyAutofillCompletePostCall(WebAuthnGetAssertionResponse webAuthnGetAssertionResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webAuthnGetAssertionResponse;

        // create path and map variables
        String localVarPath = "/passkey/autofill/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call passkeyAutofillCompletePostValidateBeforeCall(WebAuthnGetAssertionResponse webAuthnGetAssertionResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webAuthnGetAssertionResponse' is set
        if (webAuthnGetAssertionResponse == null) {
            throw new ApiException("Missing the required parameter 'webAuthnGetAssertionResponse' when calling passkeyAutofillCompletePost(Async)");
        }

        return passkeyAutofillCompletePostCall(webAuthnGetAssertionResponse, _callback);

    }

    /**
     * Complete autofill authentication
     * 
     * @param webAuthnGetAssertionResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public void passkeyAutofillCompletePost(WebAuthnGetAssertionResponse webAuthnGetAssertionResponse) throws ApiException {
        passkeyAutofillCompletePostWithHttpInfo(webAuthnGetAssertionResponse);
    }

    /**
     * Complete autofill authentication
     * 
     * @param webAuthnGetAssertionResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> passkeyAutofillCompletePostWithHttpInfo(WebAuthnGetAssertionResponse webAuthnGetAssertionResponse) throws ApiException {
        okhttp3.Call localVarCall = passkeyAutofillCompletePostValidateBeforeCall(webAuthnGetAssertionResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete autofill authentication (asynchronously)
     * 
     * @param webAuthnGetAssertionResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passkeyAutofillCompletePostAsync(WebAuthnGetAssertionResponse webAuthnGetAssertionResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = passkeyAutofillCompletePostValidateBeforeCall(webAuthnGetAssertionResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for passkeyAutofillInitPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passkeyAutofillInitPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/passkey/autofill/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call passkeyAutofillInitPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return passkeyAutofillInitPostCall(_callback);

    }

    /**
     * Init autofill authentication (usernameless)
     * 
     * @return WebAuthnGetAssertionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public WebAuthnGetAssertionRequest passkeyAutofillInitPost() throws ApiException {
        ApiResponse<WebAuthnGetAssertionRequest> localVarResp = passkeyAutofillInitPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Init autofill authentication (usernameless)
     * 
     * @return ApiResponse&lt;WebAuthnGetAssertionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAuthnGetAssertionRequest> passkeyAutofillInitPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = passkeyAutofillInitPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebAuthnGetAssertionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Init autofill authentication (usernameless) (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passkeyAutofillInitPostAsync(final ApiCallback<WebAuthnGetAssertionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = passkeyAutofillInitPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebAuthnGetAssertionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysAuthCompletePost
     * @param uid  (required)
     * @param webAuthnGetAssertionResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysAuthCompletePostCall(String uid, WebAuthnGetAssertionResponse webAuthnGetAssertionResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webAuthnGetAssertionResponse;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/auth/complete"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysAuthCompletePostValidateBeforeCall(String uid, WebAuthnGetAssertionResponse webAuthnGetAssertionResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysAuthCompletePost(Async)");
        }

        // verify the required parameter 'webAuthnGetAssertionResponse' is set
        if (webAuthnGetAssertionResponse == null) {
            throw new ApiException("Missing the required parameter 'webAuthnGetAssertionResponse' when calling usersUidPasskeysAuthCompletePost(Async)");
        }

        return usersUidPasskeysAuthCompletePostCall(uid, webAuthnGetAssertionResponse, _callback);

    }

    /**
     * Complete passkey authentication
     * 
     * @param uid  (required)
     * @param webAuthnGetAssertionResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public void usersUidPasskeysAuthCompletePost(String uid, WebAuthnGetAssertionResponse webAuthnGetAssertionResponse) throws ApiException {
        usersUidPasskeysAuthCompletePostWithHttpInfo(uid, webAuthnGetAssertionResponse);
    }

    /**
     * Complete passkey authentication
     * 
     * @param uid  (required)
     * @param webAuthnGetAssertionResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUidPasskeysAuthCompletePostWithHttpInfo(String uid, WebAuthnGetAssertionResponse webAuthnGetAssertionResponse) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysAuthCompletePostValidateBeforeCall(uid, webAuthnGetAssertionResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete passkey authentication (asynchronously)
     * 
     * @param uid  (required)
     * @param webAuthnGetAssertionResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysAuthCompletePostAsync(String uid, WebAuthnGetAssertionResponse webAuthnGetAssertionResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysAuthCompletePostValidateBeforeCall(uid, webAuthnGetAssertionResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysAuthInitPost
     * @param uid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysAuthInitPostCall(String uid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/auth/init"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysAuthInitPostValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysAuthInitPost(Async)");
        }

        return usersUidPasskeysAuthInitPostCall(uid, _callback);

    }

    /**
     * Start passkey authentication
     * 
     * @param uid  (required)
     * @return WebAuthnGetAssertionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public WebAuthnGetAssertionRequest usersUidPasskeysAuthInitPost(String uid) throws ApiException {
        ApiResponse<WebAuthnGetAssertionRequest> localVarResp = usersUidPasskeysAuthInitPostWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * Start passkey authentication
     * 
     * @param uid  (required)
     * @return ApiResponse&lt;WebAuthnGetAssertionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAuthnGetAssertionRequest> usersUidPasskeysAuthInitPostWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysAuthInitPostValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<WebAuthnGetAssertionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start passkey authentication (asynchronously)
     * 
     * @param uid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GetAssertionRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysAuthInitPostAsync(String uid, final ApiCallback<WebAuthnGetAssertionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysAuthInitPostValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<WebAuthnGetAssertionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysEnrolCompletePost
     * @param uid  (required)
     * @param webAuthnMakeCredentialResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysEnrolCompletePostCall(String uid, WebAuthnMakeCredentialResponse webAuthnMakeCredentialResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webAuthnMakeCredentialResponse;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/enrol/complete"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysEnrolCompletePostValidateBeforeCall(String uid, WebAuthnMakeCredentialResponse webAuthnMakeCredentialResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysEnrolCompletePost(Async)");
        }

        // verify the required parameter 'webAuthnMakeCredentialResponse' is set
        if (webAuthnMakeCredentialResponse == null) {
            throw new ApiException("Missing the required parameter 'webAuthnMakeCredentialResponse' when calling usersUidPasskeysEnrolCompletePost(Async)");
        }

        return usersUidPasskeysEnrolCompletePostCall(uid, webAuthnMakeCredentialResponse, _callback);

    }

    /**
     * Complete passkey enrollment
     * 
     * @param uid  (required)
     * @param webAuthnMakeCredentialResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey saved </td><td>  -  </td></tr>
     </table>
     */
    public void usersUidPasskeysEnrolCompletePost(String uid, WebAuthnMakeCredentialResponse webAuthnMakeCredentialResponse) throws ApiException {
        usersUidPasskeysEnrolCompletePostWithHttpInfo(uid, webAuthnMakeCredentialResponse);
    }

    /**
     * Complete passkey enrollment
     * 
     * @param uid  (required)
     * @param webAuthnMakeCredentialResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUidPasskeysEnrolCompletePostWithHttpInfo(String uid, WebAuthnMakeCredentialResponse webAuthnMakeCredentialResponse) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysEnrolCompletePostValidateBeforeCall(uid, webAuthnMakeCredentialResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete passkey enrollment (asynchronously)
     * 
     * @param uid  (required)
     * @param webAuthnMakeCredentialResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysEnrolCompletePostAsync(String uid, WebAuthnMakeCredentialResponse webAuthnMakeCredentialResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysEnrolCompletePostValidateBeforeCall(uid, webAuthnMakeCredentialResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysEnrolInitPost
     * @param uid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MakeCredentialRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysEnrolInitPostCall(String uid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/enrol/init"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysEnrolInitPostValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysEnrolInitPost(Async)");
        }

        return usersUidPasskeysEnrolInitPostCall(uid, _callback);

    }

    /**
     * Start passkey enrollment
     * 
     * @param uid  (required)
     * @return WebAuthnMakeCredentialRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MakeCredentialRequest </td><td>  -  </td></tr>
     </table>
     */
    public WebAuthnMakeCredentialRequest usersUidPasskeysEnrolInitPost(String uid) throws ApiException {
        ApiResponse<WebAuthnMakeCredentialRequest> localVarResp = usersUidPasskeysEnrolInitPostWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * Start passkey enrollment
     * 
     * @param uid  (required)
     * @return ApiResponse&lt;WebAuthnMakeCredentialRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MakeCredentialRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAuthnMakeCredentialRequest> usersUidPasskeysEnrolInitPostWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysEnrolInitPostValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<WebAuthnMakeCredentialRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start passkey enrollment (asynchronously)
     * 
     * @param uid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MakeCredentialRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysEnrolInitPostAsync(String uid, final ApiCallback<WebAuthnMakeCredentialRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysEnrolInitPostValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<WebAuthnMakeCredentialRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
