/*
 * Copyright (c) 2025.
 * @Author: Rosbitskyy Ruslan
 * @email: rosbitskyy@gmail.com
 * @license Licensed under the MIT License (MIT)
 */

/*
 * IDLayr Passkeys
 * Base API definition for IDLayr Passkey Server 
 *
 * The version of the OpenAPI document: 1.0.12
 * Contact: help@idlayr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Passkey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PasskeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PasskeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PasskeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersUidPasskeysCredidDelete
     * @param uid  (required)
     * @param credid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysCredidDeleteCall(String uid, String credid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/{credid}"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()))
            .replace("{" + "credid" + "}", localVarApiClient.escapeString(credid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysCredidDeleteValidateBeforeCall(String uid, String credid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysCredidDelete(Async)");
        }

        // verify the required parameter 'credid' is set
        if (credid == null) {
            throw new ApiException("Missing the required parameter 'credid' when calling usersUidPasskeysCredidDelete(Async)");
        }

        return usersUidPasskeysCredidDeleteCall(uid, credid, _callback);

    }

    /**
     * Schedule passkey for deletion
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey disabled </td><td>  -  </td></tr>
     </table>
     */
    public void usersUidPasskeysCredidDelete(String uid, String credid) throws ApiException {
        usersUidPasskeysCredidDeleteWithHttpInfo(uid, credid);
    }

    /**
     * Schedule passkey for deletion
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUidPasskeysCredidDeleteWithHttpInfo(String uid, String credid) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysCredidDeleteValidateBeforeCall(uid, credid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedule passkey for deletion (asynchronously)
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysCredidDeleteAsync(String uid, String credid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysCredidDeleteValidateBeforeCall(uid, credid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysCredidGet
     * @param uid  (required)
     * @param credid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysCredidGetCall(String uid, String credid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/{credid}"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()))
            .replace("{" + "credid" + "}", localVarApiClient.escapeString(credid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysCredidGetValidateBeforeCall(String uid, String credid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysCredidGet(Async)");
        }

        // verify the required parameter 'credid' is set
        if (credid == null) {
            throw new ApiException("Missing the required parameter 'credid' when calling usersUidPasskeysCredidGet(Async)");
        }

        return usersUidPasskeysCredidGetCall(uid, credid, _callback);

    }

    /**
     * Get specific passkey
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @return Passkey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey object </td><td>  -  </td></tr>
     </table>
     */
    public Passkey usersUidPasskeysCredidGet(String uid, String credid) throws ApiException {
        ApiResponse<Passkey> localVarResp = usersUidPasskeysCredidGetWithHttpInfo(uid, credid);
        return localVarResp.getData();
    }

    /**
     * Get specific passkey
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @return ApiResponse&lt;Passkey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Passkey> usersUidPasskeysCredidGetWithHttpInfo(String uid, String credid) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysCredidGetValidateBeforeCall(uid, credid, null);
        Type localVarReturnType = new TypeToken<Passkey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific passkey (asynchronously)
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Passkey object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysCredidGetAsync(String uid, String credid, final ApiCallback<Passkey> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysCredidGetValidateBeforeCall(uid, credid, _callback);
        Type localVarReturnType = new TypeToken<Passkey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysCredidPut
     * @param uid  (required)
     * @param credid  (required)
     * @param passkey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysCredidPutCall(String uid, String credid, Passkey passkey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passkey;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys/{credid}"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()))
            .replace("{" + "credid" + "}", localVarApiClient.escapeString(credid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysCredidPutValidateBeforeCall(String uid, String credid, Passkey passkey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysCredidPut(Async)");
        }

        // verify the required parameter 'credid' is set
        if (credid == null) {
            throw new ApiException("Missing the required parameter 'credid' when calling usersUidPasskeysCredidPut(Async)");
        }

        // verify the required parameter 'passkey' is set
        if (passkey == null) {
            throw new ApiException("Missing the required parameter 'passkey' when calling usersUidPasskeysCredidPut(Async)");
        }

        return usersUidPasskeysCredidPutCall(uid, credid, passkey, _callback);

    }

    /**
     * Update passkey friendly name
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @param passkey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated </td><td>  -  </td></tr>
     </table>
     */
    public void usersUidPasskeysCredidPut(String uid, String credid, Passkey passkey) throws ApiException {
        usersUidPasskeysCredidPutWithHttpInfo(uid, credid, passkey);
    }

    /**
     * Update passkey friendly name
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @param passkey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUidPasskeysCredidPutWithHttpInfo(String uid, String credid, Passkey passkey) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysCredidPutValidateBeforeCall(uid, credid, passkey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update passkey friendly name (asynchronously)
     * 
     * @param uid  (required)
     * @param credid  (required)
     * @param passkey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysCredidPutAsync(String uid, String credid, Passkey passkey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysCredidPutValidateBeforeCall(uid, credid, passkey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUidPasskeysGet
     * @param uid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of passkeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysGetCall(String uid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{uid}/passkeys"
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUidPasskeysGetValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling usersUidPasskeysGet(Async)");
        }

        return usersUidPasskeysGetCall(uid, _callback);

    }

    /**
     * List user passkeys
     * 
     * @param uid  (required)
     * @return List&lt;Passkey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of passkeys </td><td>  -  </td></tr>
     </table>
     */
    public List<Passkey> usersUidPasskeysGet(String uid) throws ApiException {
        ApiResponse<List<Passkey>> localVarResp = usersUidPasskeysGetWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * List user passkeys
     * 
     * @param uid  (required)
     * @return ApiResponse&lt;List&lt;Passkey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of passkeys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Passkey>> usersUidPasskeysGetWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = usersUidPasskeysGetValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<List<Passkey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List user passkeys (asynchronously)
     * 
     * @param uid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of passkeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUidPasskeysGetAsync(String uid, final ApiCallback<List<Passkey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUidPasskeysGetValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<List<Passkey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
