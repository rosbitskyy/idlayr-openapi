/*
 * Copyright (c) 2025.
 * @Author: Rosbitskyy Ruslan
 * @email: rosbitskyy@gmail.com
 * @license Licensed under the MIT License (MIT)
 */

/*
 * IDLayr Passkeys
 * Base API definition for IDLayr Passkey Server 
 *
 * The version of the OpenAPI document: 1.0.12
 * Contact: help@idlayr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthenticatorInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T11:56:01.733301+03:00[Europe/Sofia]", comments = "Generator version: 7.7.0")
public class AuthenticatorInfo {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ICON_DARK = "IconDark";
  @SerializedName(SERIALIZED_NAME_ICON_DARK)
  private String iconDark;

  public static final String SERIALIZED_NAME_ICON_LIGHT = "IconLight";
  @SerializedName(SERIALIZED_NAME_ICON_LIGHT)
  private String iconLight;

  public static final String SERIALIZED_NAME_FIDO_CERTIFIED = "FidoCertified";
  @SerializedName(SERIALIZED_NAME_FIDO_CERTIFIED)
  private Boolean fidoCertified;

  public static final String SERIALIZED_NAME_FIDO_CERTIFIED_LEVEL = "FidoCertifiedLevel";
  @SerializedName(SERIALIZED_NAME_FIDO_CERTIFIED_LEVEL)
  private String fidoCertifiedLevel;

  public AuthenticatorInfo() {
  }

  public AuthenticatorInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AuthenticatorInfo iconDark(String iconDark) {
    this.iconDark = iconDark;
    return this;
  }

  /**
   * Get iconDark
   * @return iconDark
   */
  @javax.annotation.Nullable
  public String getIconDark() {
    return iconDark;
  }

  public void setIconDark(String iconDark) {
    this.iconDark = iconDark;
  }


  public AuthenticatorInfo iconLight(String iconLight) {
    this.iconLight = iconLight;
    return this;
  }

  /**
   * Get iconLight
   * @return iconLight
   */
  @javax.annotation.Nullable
  public String getIconLight() {
    return iconLight;
  }

  public void setIconLight(String iconLight) {
    this.iconLight = iconLight;
  }


  public AuthenticatorInfo fidoCertified(Boolean fidoCertified) {
    this.fidoCertified = fidoCertified;
    return this;
  }

  /**
   * Get fidoCertified
   * @return fidoCertified
   */
  @javax.annotation.Nullable
  public Boolean getFidoCertified() {
    return fidoCertified;
  }

  public void setFidoCertified(Boolean fidoCertified) {
    this.fidoCertified = fidoCertified;
  }


  public AuthenticatorInfo fidoCertifiedLevel(String fidoCertifiedLevel) {
    this.fidoCertifiedLevel = fidoCertifiedLevel;
    return this;
  }

  /**
   * Get fidoCertifiedLevel
   * @return fidoCertifiedLevel
   */
  @javax.annotation.Nullable
  public String getFidoCertifiedLevel() {
    return fidoCertifiedLevel;
  }

  public void setFidoCertifiedLevel(String fidoCertifiedLevel) {
    this.fidoCertifiedLevel = fidoCertifiedLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatorInfo authenticatorInfo = (AuthenticatorInfo) o;
    return Objects.equals(this.name, authenticatorInfo.name) &&
        Objects.equals(this.iconDark, authenticatorInfo.iconDark) &&
        Objects.equals(this.iconLight, authenticatorInfo.iconLight) &&
        Objects.equals(this.fidoCertified, authenticatorInfo.fidoCertified) &&
        Objects.equals(this.fidoCertifiedLevel, authenticatorInfo.fidoCertifiedLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, iconDark, iconLight, fidoCertified, fidoCertifiedLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatorInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    iconDark: ").append(toIndentedString(iconDark)).append("\n");
    sb.append("    iconLight: ").append(toIndentedString(iconLight)).append("\n");
    sb.append("    fidoCertified: ").append(toIndentedString(fidoCertified)).append("\n");
    sb.append("    fidoCertifiedLevel: ").append(toIndentedString(fidoCertifiedLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("IconDark");
    openapiFields.add("IconLight");
    openapiFields.add("FidoCertified");
    openapiFields.add("FidoCertifiedLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticatorInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticatorInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticatorInfo is not found in the empty JSON string", AuthenticatorInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticatorInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticatorInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("IconDark") != null && !jsonObj.get("IconDark").isJsonNull()) && !jsonObj.get("IconDark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IconDark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IconDark").toString()));
      }
      if ((jsonObj.get("IconLight") != null && !jsonObj.get("IconLight").isJsonNull()) && !jsonObj.get("IconLight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IconLight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IconLight").toString()));
      }
      if ((jsonObj.get("FidoCertifiedLevel") != null && !jsonObj.get("FidoCertifiedLevel").isJsonNull()) && !jsonObj.get("FidoCertifiedLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FidoCertifiedLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FidoCertifiedLevel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticatorInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticatorInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticatorInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticatorInfo>() {
           @Override
           public void write(JsonWriter out, AuthenticatorInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticatorInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticatorInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticatorInfo
   * @throws IOException if the JSON string is invalid with respect to AuthenticatorInfo
   */
  public static AuthenticatorInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticatorInfo.class);
  }

  /**
   * Convert an instance of AuthenticatorInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

