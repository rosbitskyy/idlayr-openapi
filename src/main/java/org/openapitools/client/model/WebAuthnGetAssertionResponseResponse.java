/*
 * Copyright (c) 2025.
 * @Author: Rosbitskyy Ruslan
 * @email: rosbitskyy@gmail.com
 * @license Licensed under the MIT License (MIT)
 */

/*
 * IDLayr Passkeys
 * Base API definition for IDLayr Passkey Server 
 *
 * The version of the OpenAPI document: 1.0.12
 * Contact: help@idlayr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebAuthnGetAssertionResponseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T11:56:01.733301+03:00[Europe/Sofia]", comments = "Generator version: 7.7.0")
public class WebAuthnGetAssertionResponseResponse {
  public static final String SERIALIZED_NAME_AUTHENTICATOR_DATA = "authenticatorData";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATOR_DATA)
  private String authenticatorData;

  public static final String SERIALIZED_NAME_CLIENT_DATA_J_S_O_N = "clientDataJSON";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA_J_S_O_N)
  private String clientDataJSON;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_USER_HANDLE = "userHandle";
  @SerializedName(SERIALIZED_NAME_USER_HANDLE)
  private String userHandle;

  public WebAuthnGetAssertionResponseResponse() {
  }

  public WebAuthnGetAssertionResponseResponse authenticatorData(String authenticatorData) {
    this.authenticatorData = authenticatorData;
    return this;
  }

  /**
   * Get authenticatorData
   * @return authenticatorData
   */
  @javax.annotation.Nullable
  public String getAuthenticatorData() {
    return authenticatorData;
  }

  public void setAuthenticatorData(String authenticatorData) {
    this.authenticatorData = authenticatorData;
  }


  public WebAuthnGetAssertionResponseResponse clientDataJSON(String clientDataJSON) {
    this.clientDataJSON = clientDataJSON;
    return this;
  }

  /**
   * Get clientDataJSON
   * @return clientDataJSON
   */
  @javax.annotation.Nullable
  public String getClientDataJSON() {
    return clientDataJSON;
  }

  public void setClientDataJSON(String clientDataJSON) {
    this.clientDataJSON = clientDataJSON;
  }


  public WebAuthnGetAssertionResponseResponse signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public WebAuthnGetAssertionResponseResponse userHandle(String userHandle) {
    this.userHandle = userHandle;
    return this;
  }

  /**
   * Get userHandle
   * @return userHandle
   */
  @javax.annotation.Nullable
  public String getUserHandle() {
    return userHandle;
  }

  public void setUserHandle(String userHandle) {
    this.userHandle = userHandle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAuthnGetAssertionResponseResponse webAuthnGetAssertionResponseResponse = (WebAuthnGetAssertionResponseResponse) o;
    return Objects.equals(this.authenticatorData, webAuthnGetAssertionResponseResponse.authenticatorData) &&
        Objects.equals(this.clientDataJSON, webAuthnGetAssertionResponseResponse.clientDataJSON) &&
        Objects.equals(this.signature, webAuthnGetAssertionResponseResponse.signature) &&
        Objects.equals(this.userHandle, webAuthnGetAssertionResponseResponse.userHandle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticatorData, clientDataJSON, signature, userHandle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAuthnGetAssertionResponseResponse {\n");
    sb.append("    authenticatorData: ").append(toIndentedString(authenticatorData)).append("\n");
    sb.append("    clientDataJSON: ").append(toIndentedString(clientDataJSON)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    userHandle: ").append(toIndentedString(userHandle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticatorData");
    openapiFields.add("clientDataJSON");
    openapiFields.add("signature");
    openapiFields.add("userHandle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebAuthnGetAssertionResponseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAuthnGetAssertionResponseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAuthnGetAssertionResponseResponse is not found in the empty JSON string", WebAuthnGetAssertionResponseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAuthnGetAssertionResponseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAuthnGetAssertionResponseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticatorData") != null && !jsonObj.get("authenticatorData").isJsonNull()) && !jsonObj.get("authenticatorData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticatorData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticatorData").toString()));
      }
      if ((jsonObj.get("clientDataJSON") != null && !jsonObj.get("clientDataJSON").isJsonNull()) && !jsonObj.get("clientDataJSON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientDataJSON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientDataJSON").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("userHandle") != null && !jsonObj.get("userHandle").isJsonNull()) && !jsonObj.get("userHandle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userHandle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userHandle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAuthnGetAssertionResponseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAuthnGetAssertionResponseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAuthnGetAssertionResponseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAuthnGetAssertionResponseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAuthnGetAssertionResponseResponse>() {
           @Override
           public void write(JsonWriter out, WebAuthnGetAssertionResponseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAuthnGetAssertionResponseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebAuthnGetAssertionResponseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebAuthnGetAssertionResponseResponse
   * @throws IOException if the JSON string is invalid with respect to WebAuthnGetAssertionResponseResponse
   */
  public static WebAuthnGetAssertionResponseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAuthnGetAssertionResponseResponse.class);
  }

  /**
   * Convert an instance of WebAuthnGetAssertionResponseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

