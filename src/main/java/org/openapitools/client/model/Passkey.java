/*
 * Copyright (c) 2025.
 * @Author: Rosbitskyy Ruslan
 * @email: rosbitskyy@gmail.com
 * @license Licensed under the MIT License (MIT)
 */

/*
 * IDLayr Passkeys
 * Base API definition for IDLayr Passkey Server 
 *
 * The version of the OpenAPI document: 1.0.12
 * Contact: help@idlayr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AuthenticatorInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Passkey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T11:56:01.733301+03:00[Europe/Sofia]", comments = "Generator version: 7.7.0")
public class Passkey {
  public static final String SERIALIZED_NAME_CRED_ID = "credId";
  @SerializedName(SERIALIZED_NAME_CRED_ID)
  private String credId;

  public static final String SERIALIZED_NAME_COUNTER = "counter";
  @SerializedName(SERIALIZED_NAME_COUNTER)
  private Integer counter;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private byte[] publicKey;

  public static final String SERIALIZED_NAME_AAGUID = "aaguid";
  @SerializedName(SERIALIZED_NAME_AAGUID)
  private UUID aaguid;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PASSKEY("passkey"),
    
    SECURITY_KEY("security-key");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_LAST_USED = "lastUsed";
  @SerializedName(SERIALIZED_NAME_LAST_USED)
  private OffsetDateTime lastUsed;

  public static final String SERIALIZED_NAME_ATTESTATION_VALID = "attestationValid";
  @SerializedName(SERIALIZED_NAME_ATTESTATION_VALID)
  private Boolean attestationValid;

  public static final String SERIALIZED_NAME_AUTHENTICATOR_INFO = "authenticatorInfo";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATOR_INFO)
  private AuthenticatorInfo authenticatorInfo;

  public Passkey() {
  }

  public Passkey credId(String credId) {
    this.credId = credId;
    return this;
  }

  /**
   * Get credId
   * @return credId
   */
  @javax.annotation.Nullable
  public String getCredId() {
    return credId;
  }

  public void setCredId(String credId) {
    this.credId = credId;
  }


  public Passkey counter(Integer counter) {
    this.counter = counter;
    return this;
  }

  /**
   * Get counter
   * @return counter
   */
  @javax.annotation.Nullable
  public Integer getCounter() {
    return counter;
  }

  public void setCounter(Integer counter) {
    this.counter = counter;
  }


  public Passkey publicKey(byte[] publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public byte[] getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(byte[] publicKey) {
    this.publicKey = publicKey;
  }


  public Passkey aaguid(UUID aaguid) {
    this.aaguid = aaguid;
    return this;
  }

  /**
   * Get aaguid
   * @return aaguid
   */
  @javax.annotation.Nullable
  public UUID getAaguid() {
    return aaguid;
  }

  public void setAaguid(UUID aaguid) {
    this.aaguid = aaguid;
  }


  public Passkey type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Passkey friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Get friendlyName
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public Passkey lastUsed(OffsetDateTime lastUsed) {
    this.lastUsed = lastUsed;
    return this;
  }

  /**
   * Get lastUsed
   * @return lastUsed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsed() {
    return lastUsed;
  }

  public void setLastUsed(OffsetDateTime lastUsed) {
    this.lastUsed = lastUsed;
  }


  public Passkey attestationValid(Boolean attestationValid) {
    this.attestationValid = attestationValid;
    return this;
  }

  /**
   * Get attestationValid
   * @return attestationValid
   */
  @javax.annotation.Nullable
  public Boolean getAttestationValid() {
    return attestationValid;
  }

  public void setAttestationValid(Boolean attestationValid) {
    this.attestationValid = attestationValid;
  }


  public Passkey authenticatorInfo(AuthenticatorInfo authenticatorInfo) {
    this.authenticatorInfo = authenticatorInfo;
    return this;
  }

  /**
   * Get authenticatorInfo
   * @return authenticatorInfo
   */
  @javax.annotation.Nullable
  public AuthenticatorInfo getAuthenticatorInfo() {
    return authenticatorInfo;
  }

  public void setAuthenticatorInfo(AuthenticatorInfo authenticatorInfo) {
    this.authenticatorInfo = authenticatorInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Passkey passkey = (Passkey) o;
    return Objects.equals(this.credId, passkey.credId) &&
        Objects.equals(this.counter, passkey.counter) &&
        Arrays.equals(this.publicKey, passkey.publicKey) &&
        Objects.equals(this.aaguid, passkey.aaguid) &&
        Objects.equals(this.type, passkey.type) &&
        Objects.equals(this.friendlyName, passkey.friendlyName) &&
        Objects.equals(this.lastUsed, passkey.lastUsed) &&
        Objects.equals(this.attestationValid, passkey.attestationValid) &&
        Objects.equals(this.authenticatorInfo, passkey.authenticatorInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credId, counter, Arrays.hashCode(publicKey), aaguid, type, friendlyName, lastUsed, attestationValid, authenticatorInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Passkey {\n");
    sb.append("    credId: ").append(toIndentedString(credId)).append("\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    aaguid: ").append(toIndentedString(aaguid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("    attestationValid: ").append(toIndentedString(attestationValid)).append("\n");
    sb.append("    authenticatorInfo: ").append(toIndentedString(authenticatorInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credId");
    openapiFields.add("counter");
    openapiFields.add("publicKey");
    openapiFields.add("aaguid");
    openapiFields.add("type");
    openapiFields.add("friendlyName");
    openapiFields.add("lastUsed");
    openapiFields.add("attestationValid");
    openapiFields.add("authenticatorInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Passkey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Passkey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Passkey is not found in the empty JSON string", Passkey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Passkey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Passkey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("credId") != null && !jsonObj.get("credId").isJsonNull()) && !jsonObj.get("credId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credId").toString()));
      }
      if ((jsonObj.get("aaguid") != null && !jsonObj.get("aaguid").isJsonNull()) && !jsonObj.get("aaguid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aaguid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aaguid").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      // validate the optional field `authenticatorInfo`
      if (jsonObj.get("authenticatorInfo") != null && !jsonObj.get("authenticatorInfo").isJsonNull()) {
        AuthenticatorInfo.validateJsonElement(jsonObj.get("authenticatorInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Passkey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Passkey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Passkey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Passkey.class));

       return (TypeAdapter<T>) new TypeAdapter<Passkey>() {
           @Override
           public void write(JsonWriter out, Passkey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Passkey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Passkey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Passkey
   * @throws IOException if the JSON string is invalid with respect to Passkey
   */
  public static Passkey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Passkey.class);
  }

  /**
   * Convert an instance of Passkey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

